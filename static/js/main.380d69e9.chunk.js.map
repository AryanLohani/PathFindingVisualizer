{"version":3,"sources":["pfv/node/node.jsx","pfv/helpers.jsx","pfv/algortihms/helpers.jsx","pfv/algortihms/Djisktra.jsx","pfv/algortihms/BFS.jsx","pfv/algortihms/DFS.jsx","pfv/algortihms/data.jsx","pfv/main.jsx","reportWebVitals.js","index.js"],"names":["Node","props","wall_weight","classes","iterate","isStart","isEnd","isPath","isVisited","Weight","classname","key","className","fontSize","Icon","tooltip","text","idx","generateText","GenerateGrid","rows","cols","CreateNode","row","col","grid","push","node","Math","floor","_node","isNeighbor","Path","par","endnode","u","shortestpath","reverse","Djisktra","startnode","size_of_grid","length","distance","Array","fill","visited","queue","Order","sort","a","b","shift","R","C","i","r","c","next","Number","BFS","DFS","dfs","AlgoDescription","AlgoName","isWeighted","document","body","clientWidth","App","useState","setGrid","start","setStart","position","setPosition","pressed","setPressed","weight","setWeight","Description","setDescription","isAnimation","setIsAnimation","title","AlgoCall","Animate","Arr","myPromise","Promise","resolve","reject","setTimeout","newgrid","slice","getElementById","value","RunAlgo","new_grid","RemoveWeights","shorteshtpath","AnimateVisitedOrder","Container","maxWidth","Grid","container","justify","item","md","Box","m","Button","onClick","variant","color","size","disabled","padding","xs","type","max","min","id","onChange","Object","keys","map","e","style","width","onDoubleClick","array","handlechange","onMouseDown","onMouseUp","onMouseEnter","handlewalls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.380d69e9.chunk.js","sourcesContent":["import React  from 'react';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport \"./node.css\";\r\n\r\n\r\nconst Node = (props) =>{\r\n    const wall_weight = 1e6;\r\n    var classes = \"node tooltip \";\r\n    const iterate = {\r\n        isStart: props.isStart,\r\n        isEnd: props.isEnd,\r\n        isPath: props.isPath,\r\n        isVisited: props.isVisited,\r\n        Weight: props.Weight == wall_weight,\r\n    }\r\n\r\n    const classname = {\r\n        isStart: \"startnode \",\r\n        isEnd: \"endnode \",\r\n        isPath: \"path \",\r\n        isVisited: \"visited \",  \r\n        Weight: \"wall \",\r\n    };\r\n\r\n    for(let key in iterate){\r\n        if(iterate[key] ){\r\n            classes += classname[key];\r\n            break;\r\n        }\r\n    }\r\n    const generateText = ()=>{\r\n        const tooltip = {\r\n            isStart: \"startnode\\n\",\r\n            isEnd: \"endnode\\n\",\r\n        }\r\n        var text = \"index: \"  + props.idx;\r\n        text += (iterate.Weight ? \"Wall\" : \" Weight:\" + props.Weight) + \"\\n\";\r\n        for(let key in tooltip){\r\n            if(iterate[key]){\r\n                text += tooltip[key]; \r\n            }\r\n        }\r\n        return text;\r\n    }\r\n    const Icon =() =>{\r\n        switch (true){\r\n            case props.isStart:\r\n                return(\r\n                    <PlayArrowIcon fontSize=\"large\"/>\r\n                );\r\n            case props.isEnd:\r\n                return(\r\n                    <HighlightOffIcon fontSize=\"large\"/>\r\n                );\r\n            case props.Weight>1 && props.Weight<wall_weight:\r\n                return(\r\n                    <LockIcon fontSize=\"small\"/>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    } \r\n    return(\r\n        <div className={classes}>\r\n            {Icon()}\r\n            <p className=\"tooltiptext\">{generateText()}</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Node;","export function GenerateGrid(rows,cols){\r\n    function CreateNode(row, col){\r\n        return {\r\n            idx: cols * row + col,\r\n            row: row,\r\n            col: col,\r\n            isVisited: false,\r\n            isPath: false,\r\n            Weight: 1,\r\n        }\r\n    }\r\n\r\n    let grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            grid.push(CreateNode(row, col));\r\n        }\r\n    }\r\n    return grid;\r\n};\r\n\r\nexport function RemoveWeights(grid){\r\n    const wall_weight = 1e6;\r\n    let new_grid = grid.slice();\r\n    for(let i = 0;i < grid.length ; i++){\r\n        if(new_grid[i].Weight!=wall_weight) new_grid[i].Weight = 1;\r\n    }\r\n    return new_grid;\r\n};","export function row(node , cols){\r\n    return Math.floor(node/cols);\r\n}\r\nexport function col(node , cols){\r\n    return node%cols;\r\n}\r\nexport function _node(row , col , cols){\r\n    return row*cols + col; \r\n}\r\nexport function isNeighbor(row , col , rows , cols){\r\n    return (row>=0 && row<rows) && (col>=0 && col<cols);\r\n}\r\nexport function Path(par, endnode){\r\n    var u = endnode;\r\n    var shortestpath = [];\r\n    while(u != -1){\r\n        shortestpath.push(u);\r\n        u = par[u];\r\n    }\r\n    shortestpath.reverse();\r\n    return shortestpath;\r\n}\r\n","import {row , col , _node, isNeighbor, Path} from \"./helpers\";\r\n\r\nexport function Djisktra(rows ,cols ,startnode ,endnode ,grid){\r\n    const INF = 1e6 , size_of_grid = grid.length , wall_weight = 1e6;\r\n    const iterate = [[1,0],[0,1],[-1,0],[0,-1]];\r\n\r\n    // calculate all paths\r\n    var distance = new Array(size_of_grid).fill(INF);\r\n    var visited = new Array(size_of_grid).fill(false);\r\n    var par = new Array(size_of_grid).fill(-1);\r\n    distance[startnode] = 0;\r\n    var queue = [startnode];\r\n    var Order = [];\r\n\r\n    while(queue.length){\r\n        queue.sort((a , b) => distance[a] - distance[b]);\r\n        let u = queue.shift();\r\n        if(visited[u]) continue;\r\n        let R = row(u , cols) , C = col(u , cols);\r\n        visited[u] = true;\r\n        Order.push(u);\r\n        if(u == endnode){\r\n            return [Order, Path(par, endnode)];\r\n        }\r\n\r\n        for(var i in iterate){\r\n            let r = R + iterate[i][0] , c = C + iterate[i][1];\r\n            if(!isNeighbor(r, c ,rows ,cols)) continue;\r\n            let next = _node(r,c,cols);\r\n            if(grid[next].Weight == wall_weight) continue;\r\n            if(distance[u] + Number(grid[next].Weight) < distance[next]){\r\n                distance[next] = distance[u] + Number(grid[next].Weight);\r\n                par[next] = u;\r\n                queue.push(next);\r\n            }\r\n        }\r\n    }\r\n    return[Order,[]];\r\n}","import {row , col , _node, isNeighbor, Path} from \"./helpers\";\r\n\r\nexport function BFS(rows ,cols ,startnode ,endnode ,grid){\r\n    const INF = 1e6 , size_of_grid = grid.length , wall_weight = 1e6;\r\n    const iterate = [[1,0],[0,1],[-1,0],[0,-1]];\r\n\r\n    // calculate all paths\r\n    var distance = new Array(size_of_grid).fill(INF);\r\n    var visited = new Array(size_of_grid).fill(false);\r\n    var par = new Array(size_of_grid).fill(-1);\r\n    distance[startnode] = 0;\r\n    var queue = [startnode];\r\n    var Order = [];\r\n\r\n    while(queue.length){\r\n        let u = queue.shift();\r\n        if(visited[u]) continue;\r\n        let R = row(u , cols) , C = col(u , cols);\r\n        visited[u] = true;\r\n        Order.push(u);\r\n        if(u == endnode){\r\n            return [Order, Path(par, endnode)];\r\n        }\r\n\r\n        for(var i in iterate){\r\n            let r = R + iterate[i][0] , c = C + iterate[i][1];\r\n            if(!isNeighbor(r, c ,rows ,cols)) continue;\r\n            let next = _node(r,c,cols);\r\n            if(grid[next].Weight == wall_weight) continue;\r\n            if(distance[u] + Number(grid[next].Weight) < distance[next]){\r\n                distance[next] = distance[u] + Number(grid[next].Weight);\r\n                par[next] = u;\r\n                queue.push(next);\r\n            }\r\n        }\r\n    }\r\n    return[Order,[]];\r\n}","import { _node, isNeighbor} from \"./helpers\";\r\n\r\nexport function DFS(rows ,cols ,startnode ,endnode ,grid){\r\n    const INF = 1e6 , size_of_grid = grid.length , wall_weight = 1e6;\r\n    const iterate = [[1,0],[0,1],[-1,0],[0,-1]];\r\n\r\n    // calculate all paths\r\n    var visited = new Array(size_of_grid).fill(false);\r\n    var Order = [];\r\n\r\n    function dfs(node){\r\n        Order.push(node);\r\n\r\n        if(node == endnode){\r\n            return [Order,[]];\r\n        }\r\n\r\n        visited[node] = true;\r\n        let R = grid[node].row , C = grid[node].col;\r\n        for(let i in iterate){\r\n            let r = R - iterate[i][0] , c = C - iterate[i][1];\r\n            if(!isNeighbor(r , c, rows, cols)) continue;\r\n            let next = _node(r, c, cols);\r\n            if(grid[next].Weight == wall_weight || visited[next]) continue;\r\n            \r\n            dfs(next);\r\n        }\r\n        Order.push(node);\r\n    }   \r\n    dfs(startnode);\r\n    return [Order,[]];\r\n}","export const AlgoDescription = {\r\n    Djisktra:\"Djisktra is a greedy Algorithm for finding the shortest path. It works in O(V+ElogE) time complexity and is an weighted path finding algorithm\",\r\n    BFS:\"BFS stands for breadth for search. The algorithm moves level by level. It works in O(V+E) time and is an Un-Weighted path finding algorithm\",\r\n    DFS:\"\",\r\n};\r\n\r\nexport const AlgoName = {\r\n    Djisktra: \"Djisktra\" ,\r\n    BFS: \"BFS\",\r\n    DFS: \"DFS\",\r\n};\r\n\r\nexport const isWeighted = {\r\n    Djisktra: true,\r\n    BFS: false,\r\n    DFS: false,\r\n};","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Container, Grid, Button, Box, Slider,\r\n} from \"@material-ui/core\";\r\nimport \"./main.css\";\r\nimport Node from \"../pfv/node/node.jsx\"\r\nimport { GenerateGrid, RemoveWeights } from \"./helpers.jsx\"\r\n\r\nimport { Djisktra } from \"./algortihms/Djisktra\";\r\nimport { BFS } from \"./algortihms/BFS\";\r\nimport { DFS } from \"./algortihms/DFS\"\r\nimport { AlgoDescription, AlgoName, isWeighted } from \"../pfv/algortihms/data\";\r\n\r\nvar rows = 17, cols = Math.floor((document.body.clientWidth - 55) / 40) - 1;\r\n\r\nconst App = (() => {\r\n    const wall_weight = 1e6;\r\n    const [grid, setGrid] = useState(GenerateGrid(rows, cols));\r\n    const [start, setStart] = useState(true);\r\n    const [position, setPosition] = useState([0, rows * cols - 1]);\r\n    const [pressed, setPressed] = useState(false);\r\n    const [weight, setWeight] = useState(wall_weight);\r\n    const [Description, setDescription] = useState(\"\");\r\n    const [isAnimation , setIsAnimation] = useState(false);\r\n\r\n    document.title = \"Path Finding Visualizer\";\r\n    const AlgoCall = {\r\n        Djisktra: Djisktra(rows, cols, position[0], position[1], grid),\r\n        BFS: BFS(rows, cols, position[0], position[1], grid),\r\n        DFS: DFS(rows, cols, position[0], position[1], grid),\r\n    };\r\n\r\n    const handlechange = (idx) => {\r\n        let array = position.slice();\r\n        if (start) array[0] = idx;\r\n        else array[1] = idx;\r\n        setPosition(array);\r\n    };\r\n\r\n    const handlewalls = (idx) => {\r\n        if (pressed && !isAnimation) {\r\n            let newgrid = grid.slice();\r\n            newgrid[idx].Weight = weight;\r\n            setGrid(newgrid);\r\n        }\r\n    };\r\n\r\n    async function Animate(Arr, i, key) {\r\n        if (i == Arr.length) return true;\r\n        let myPromise = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                let newgrid = grid.slice();\r\n                newgrid[Arr[i]][key] ^= true;\r\n                setGrid(newgrid);\r\n                resolve(true);\r\n            }, document.getElementById(\"time\").value);\r\n        });\r\n        if (await myPromise) {\r\n            return Animate(Arr, i + 1, key);\r\n        }\r\n    };\r\n\r\n    async function AnimateVisitedOrder(Order, shortestpath) {\r\n        setIsAnimation(true);\r\n        let myPromise = new Promise((resolve, reject) => {\r\n            resolve(Animate(Order, 0, \"isVisited\"));\r\n        });\r\n        if (await myPromise) {\r\n            Animate(shortestpath, 0, \"isPath\");\r\n        }\r\n        setIsAnimation(false);\r\n    };\r\n\r\n    const RunAlgo = (key) => {\r\n        if(!isWeighted[key]){\r\n            setGrid(RemoveWeights(grid));\r\n        }\r\n        const [Order, shorteshtpath] = AlgoCall[key];\r\n        setDescription(AlgoDescription[key]);\r\n        AnimateVisitedOrder(Order, shorteshtpath);\r\n    };\r\n\r\n    return (\r\n        <section >\r\n            <Container maxWidth=\"xl\" className=\"container\">\r\n                <Grid container justify=\"center\" >\r\n                    <Grid item md={4} className=\"item\">\r\n                        <p>Select and double click on Grid to Change start and end positions</p>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setStart(true)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                disabled = {isAnimation}\r\n                            >\r\n                                Choose Start Point</Button>\r\n                        </Box>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setStart(false)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                disabled = {isAnimation}\r\n                            >\r\n                                Choose End Point</Button>\r\n                        </Box>\r\n                        <Box m={1}>\r\n                            {/* <Button\r\n                                onClick={() => setGrid(GenerateGrid(rows,cols))}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                disabled = {isAnimation}\r\n                            >\r\n                            stop</Button> */}\r\n                            <Button\r\n                                onClick={() => setGrid(GenerateGrid(rows,cols))}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                disabled = {isAnimation}\r\n                            >\r\n                            Reset</Button>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={4} className=\"item\">\r\n                        <p>Click and drag to create walls and Weights</p>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setWeight(wall_weight)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                disabled = {isAnimation}\r\n                            >\r\n                                Set Walls</Button>\r\n                        </Box>\r\n                        <Grid container padding={1}>\r\n                            <Grid item xs={6}>\r\n                                <p>Weight of nodes to assign</p>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    max=\"20\"\r\n                                    min=\"2\"\r\n                                    id=\"weight\"\r\n                                    onChange={() => setWeight(document.getElementById(\"weight\").value)}\r\n                                    disabled = {isAnimation}\r\n                                ></input>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <p>Speed of Animation</p>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    max=\"1000\"\r\n                                    min=\"50\"\r\n                                    id=\"time\"\r\n                                ></input>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={3} className=\"item\">\r\n                        <p>Choose one of the following Algorithms</p>\r\n                        <Grid container>\r\n                            {Object.keys(AlgoName).map(e => (\r\n                                <Grid item xs={6} key={e}>\r\n                                    <Button\r\n                                        onClick={() => RunAlgo(e)}\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        disabled = {isAnimation}\r\n                                    >\r\n                                    {e}</Button>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n            <div style={{ width: (cols) * 42 }} className=\"grid\">\r\n                {grid.map(e => (\r\n                    <div\r\n                        onDoubleClick={() => handlechange(e.idx)}\r\n                        onMouseDown={() => setPressed(true)}\r\n                        onMouseUp={() => setPressed(false)}\r\n                        onMouseEnter={() => handlewalls(e.idx)}\r\n                    >\r\n                        <Node\r\n                            key={e}\r\n                            idx={e.idx}\r\n                            isVisited={e.isVisited}\r\n                            isPath={e.isPath}\r\n                            Weight={e.Weight}\r\n                            isStart={position[0] === e.idx}\r\n                            isEnd={position[1] === e.idx}\r\n                            pressed={pressed}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <p>Description: {Description}</p>\r\n            </div>\r\n        </section>\r\n    );\r\n});\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pfv/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}