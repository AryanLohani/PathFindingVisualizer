{"version":3,"sources":["pfv/node/node.jsx","pfv/main.jsx","pfv/algortihms/Djisktra.jsx","reportWebVitals.js","index.js"],"names":["Node","props","wall_weight","isStart","isEnd","isVisited","isPath","Weight","classes","className","Icon","cols","Math","floor","document","body","clientWidth","CreateNode","row","col","idx","App","useState","grid","push","GenerateGrid","setGrid","start","setStart","position","setPosition","pressed","setPressed","weight","setWeight","useEffect","title","runDjisktra","rows","startnode","endnode","INF","size","length","node","isNeighbor","calculateShotestPath","distance","shortestpath","r","c","dist","new_row","new_col","abs","reverse","shift","OrderOfVisitedNodes","Array","fill","queue","sort","a","b","u","v","Djisktra","console","log","i","setInterval","newgrid","slice","AnimateDjisktra","timeout","AnimateShortestpath","onClick","getElementById","value","type","max","min","id","style","width","map","e","onDoubleClick","array","handlechange","onMouseDown","onMouseUp","onMouseEnter","handlewalls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d255de6.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport { IoIosArrowDropright ,IoIosArrowDropleft} from \"react-icons/io\";\r\nimport { MdLock } from \"react-icons/md\";\r\nimport \"./node.css\";\r\n\r\nconst Node = (props) =>{\r\n    const wall_weight = 1e6; \r\n    const   isStart = props.isStart,\r\n            isEnd = props.isEnd,\r\n            isVisited=props.isVisited,\r\n            isPath = props.isPath,\r\n            Weight = props.Weight;\r\n    var classes = \"node \";\r\n    if(isPath) classes+=\"path \";\r\n    else if(isVisited) classes+=\"visited \";\r\n    else if(Weight==wall_weight) classes+=\"wall \"\r\n\r\n    const Icon =() =>{\r\n        switch (true){\r\n            case isStart:\r\n                return(\r\n                    <IoIosArrowDropright/>\r\n                );\r\n            case isEnd:\r\n                return(\r\n                    <IoIosArrowDropleft/>\r\n                );\r\n            case Weight>1 && Weight<wall_weight:\r\n                return(\r\n                    <MdLock/>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    } \r\n\r\n    return(\r\n        <div className={classes}>\r\n            {Icon()}\r\n        </div>\r\n    );\r\n};\r\nexport default Node;","import React,{useEffect, useState} from 'react';\r\nimport Node from \"../pfv/node/node.jsx\"\r\nimport {Djisktra} from \"../pfv/algortihms/Djisktra\"\r\nimport \"./main.css\";\r\n\r\nvar rows=15,cols=Math.floor((document.body.clientWidth -80)/40);\r\n\r\n\r\nconst GenerateGrid = () =>{\r\n    let grid=[];\r\n    for(let row=0;row<rows;row++){\r\n        for(let col=0;col<cols;col++){\r\n            grid.push(CreateNode(row,col));\r\n        }\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst CreateNode = (row,col) =>{\r\n    return {\r\n        idx: cols*row + col,\r\n        row:row,\r\n        col:col,\r\n        isVisited:false,\r\n        isPath:false,\r\n        Weight:1,\r\n    }\r\n}\r\n\r\nconst App =(()=>{\r\n    const wall_weight = 1e6; \r\n    const [grid,setGrid] = useState(GenerateGrid());\r\n    const [start,setStart] = useState(true);\r\n    const [position,setPosition] = useState([0,rows*cols -1]);\r\n    const [pressed, setPressed] = useState(false);\r\n    const [weight, setWeight] = useState(wall_weight);\r\n    \r\n\r\n    const handlechange = (idx) =>{\r\n        let array = position.slice();\r\n        if(start) array[0] = idx;\r\n        else array[1] = idx;\r\n        setPosition(array);\r\n    };\r\n    \r\n    const AnimateShortestpath = (shortestpath,timeout) =>{\r\n        for(let i=0;i<shortestpath.length;i++){\r\n            setInterval(()=>{\r\n                let newgrid = grid.slice();\r\n                newgrid[shortestpath[i]].isPath = true;\r\n                setGrid(newgrid);\r\n            },200*(i)+10*timeout);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        document.title = weight;\r\n    })\r\n\r\n    const AnimateDjisktra = (OrderOfVisitedNodes) =>{\r\n        for(let i=0;i<OrderOfVisitedNodes.length;i++){\r\n            setInterval(()=>{\r\n                let newgrid = grid.slice();\r\n                newgrid[OrderOfVisitedNodes[i]].isVisited = true;\r\n                setGrid(newgrid);\r\n            },5*i);\r\n        }\r\n    }\r\n\r\n    const runDjisktra = () =>{\r\n        const [OrderOfVisitedNodes,shortestpath] = Djisktra(rows,cols,position[0],position[1],grid);\r\n        console.log(OrderOfVisitedNodes);\r\n        AnimateDjisktra(OrderOfVisitedNodes);\r\n        AnimateShortestpath(shortestpath,OrderOfVisitedNodes.length+1);\r\n    };\r\n\r\n\r\n    const handlewalls = (idx) =>{\r\n        if(pressed){\r\n            let newgrid = grid.slice();\r\n            newgrid[idx].Weight = weight;\r\n            setGrid(newgrid);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <button onClick={() =>setStart(true)}>Choose Start Point</button>\r\n            <button onClick={() =>setStart(false)}>Choose End Point</button>\r\n            <button onClick={() =>setWeight(wall_weight)}>Set Walls</button>\r\n            <button onClick={() => setWeight(document.getElementById(\"weight\").value)}> Set Weight</button>\r\n            <input type=\"range\" max=\"50\" min = \"2\"  id=\"weight\"></input>\r\n            <br/>\r\n            <button onClick={() =>runDjisktra()}>Djisktra</button>\r\n            <div className=\"canvas\" style={{width:(cols)*42}}>\r\n                {grid.map(e=>(\r\n                    <div \r\n                        onDoubleClick={() =>handlechange(e.idx)}\r\n                        onMouseDown={() =>setPressed(true)}\r\n                        onMouseUp = {() =>setPressed(false)}\r\n                        onMouseEnter={() =>handlewalls(e.idx)}    \r\n                    >\r\n                        <Node\r\n                            key={e}\r\n                            idx ={e.idx}\r\n                            isVisited = {e.isVisited}\r\n                            isPath = {e.isPath}\r\n                            Weight = {e.Weight}\r\n                            isStart = {position[0]===e.idx}\r\n                            isEnd = {position[1]===e.idx}\r\n                        />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nexport default App;","\r\nexport function Djisktra(rows,cols,startnode,endnode,grid){\r\n    const INF = 1e9 , size = grid.length , wall_weight = 1e6;\r\n    \r\n    function node(row,col){\r\n        return row*cols + col;\r\n    }\r\n    function isNeighbor(row,col){\r\n        return (row>=0 && row<rows) && (col>=0 && col<cols) && (grid[node(row,col)].Weight != wall_weight)\r\n    }\r\n    function calculateShotestPath(distance){\r\n        let shortestpath=[];    \r\n        let r = grid[endnode].row,c = grid[endnode].col, dist = INF;   \r\n        while(true){\r\n            let new_row=r,new_col=c;\r\n            for(let row=r-1;row<=r+1;row++){\r\n                for(let col=c-1;col<=c+1;col++){\r\n                    if(Math.abs(r-row)+Math.abs(c-col)==1 && isNeighbor(row,col)){\r\n                        if(distance[node(row,col)]<dist){\r\n                            dist = distance[node(row,col)];\r\n                            new_row =row;\r\n                            new_col =col;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(new_row==r && new_col==c){\r\n                shortestpath.reverse();\r\n                shortestpath.shift();\r\n                return shortestpath;\r\n            }\r\n            shortestpath.push(node(new_row,new_col));\r\n            [r,c] = [new_row,new_col];\r\n        }\r\n    }\r\n    \r\n    let OrderOfVisitedNodes = [];\r\n    let distance = new Array(size).fill(INF);\r\n    distance[startnode]=0;\r\n    let queue = [];\r\n    queue.push(startnode);\r\n\r\n    while(queue.length>0){\r\n        queue.sort(\r\n            function(a,b){\r\n                return distance[a] - distance[b];\r\n            }\r\n        );\r\n        let u = queue[0];\r\n        if(u!=startnode)OrderOfVisitedNodes.push(u);\r\n        let r = grid[u].row , c = grid[u].col;\r\n        let x = queue.shift();\r\n        for(let row=r-1;row<=r+1;row++){\r\n            for(let col=c-1;col<=c+1;col++){\r\n                if(Math.abs(r-row)+Math.abs(c-col)==1 && isNeighbor(row,col)){\r\n                    let v = node(row,col);\r\n                    if(distance[node(row,col)]>distance[u]+grid[v].Weight){\r\n                        if(v==endnode){\r\n                            return [OrderOfVisitedNodes,calculateShotestPath(distance)];\r\n                        }\r\n                        distance[v] = distance[u]+grid[v].Weight;\r\n                        queue.push(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return[OrderOfVisitedNodes,[]];\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pfv/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}