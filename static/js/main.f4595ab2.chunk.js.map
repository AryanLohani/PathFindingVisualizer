{"version":3,"sources":["pfv/node/node.jsx","pfv/main.jsx","pfv/algortihms/Djisktra.jsx","pfv/algortihms/Bfs.jsx","reportWebVitals.js","index.js"],"names":["Node","props","wall_weight","isStart","isEnd","isVisited","isPath","Weight","classes","className","color","fontSize","Icon","cols","Math","floor","document","body","clientWidth","AlgoDescription","CreateNode","row","col","idx","App","useState","grid","push","GenerateGrid","setGrid","start","setStart","position","setPosition","pressed","setPressed","weight","setWeight","Description","setDescription","runDjisktra","rows","startnode","endnode","INF","size","length","node","isNeighbor","calculateShotestPath","distance","shortestpath","r","c","dist","new_row","new_col","abs","reverse","shift","OrderOfVisitedNodes","Array","fill","queue","sort","a","b","u","v","Djisktra","i","setInterval","newgrid","slice","AnimateDjisktra","timeout","AnimateShortestpath","title","Container","maxWidth","Grid","container","justify","item","md","Box","m","Button","onClick","variant","type","max","min","id","getElementById","value","xs","new_grid","removeWalls","runBFS","style","width","map","e","onDoubleClick","array","handlechange","onMouseDown","onMouseUp","onMouseEnter","handlewalls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f4595ab2.chunk.js","sourcesContent":["import React  from 'react';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport \"./node.css\";\r\n\r\n\r\nconst Node = (props) =>{\r\n    const wall_weight = 1e6; \r\n    const   isStart = props.isStart,\r\n            isEnd = props.isEnd,\r\n            isVisited=props.isVisited,\r\n            isPath = props.isPath,\r\n            Weight = props.Weight;\r\n    var classes = \"node \";\r\n    if(isPath) classes+=\"path \";\r\n    else if(isVisited) classes+=\"visited \";\r\n    else if(Weight==wall_weight) classes+=\"wall \"\r\n\r\n    const Icon =() =>{\r\n        switch (true){\r\n            case isStart:\r\n                return(\r\n                    <PlayArrowIcon color=\"primary\" fontSize=\"large\"/>\r\n                );\r\n            case isEnd:\r\n                return(\r\n                    <HighlightOffIcon color=\"secondary\" fontSize=\"medium\"/>\r\n                );\r\n            case Weight>1 && Weight<wall_weight:\r\n                return(\r\n                    <LockIcon fontSize=\"small\"/>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    } \r\n\r\n    return(\r\n        <div className={classes}>\r\n            {Icon()}\r\n        </div>\r\n    );\r\n};\r\nexport default Node;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Container, Grid, Button,Box,Slider,\r\n} from \"@material-ui/core\";\r\nimport {\r\n\r\n} from \"@material-ui/system\"\r\nimport Node from \"../pfv/node/node.jsx\"\r\nimport { Djisktra } from \"../pfv/algortihms/Djisktra\";\r\nimport { removeWalls } from \"../pfv/algortihms/Bfs\";\r\nimport \"./main.css\";\r\n\r\nvar rows = 15, cols = Math.floor((document.body.clientWidth - 80) / 40);\r\n\r\n\r\nconst GenerateGrid = () => {\r\n    let grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < cols; col++) {\r\n            grid.push(CreateNode(row, col));\r\n        }\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst AlgoDescription ={\r\n    Djisktra:\"Djisktra is a greedy Algorithm for finding the shortest path. It works in O(V+ElogE) time complexity and is an weighted path finding algorithm\",\r\n    BFS:\"BFS stands for breadth for search. The algorithm moves level by level. It works in o(V+E) time and is an Un-Weighted path finding algorithm\",\r\n}\r\n\r\nconst CreateNode = (row, col) => {\r\n    return {\r\n        idx: cols * row + col,\r\n        row: row,\r\n        col: col,\r\n        isVisited: false,\r\n        isPath: false,\r\n        Weight: 1,\r\n    }\r\n}\r\n\r\nconst App = (() => {\r\n    const wall_weight = 1e6;\r\n    const [grid, setGrid] = useState(GenerateGrid());\r\n    const [start, setStart] = useState(true);\r\n    const [position, setPosition] = useState([0, rows * cols - 1]);\r\n    const [pressed, setPressed] = useState(false);\r\n    const [weight, setWeight] = useState(wall_weight);\r\n    const [Description , setDescription] = useState(\"\");\r\n\r\n\r\n    const handlechange = (idx) => {\r\n        let array = position.slice();\r\n        if (start) array[0] = idx;\r\n        else array[1] = idx;\r\n        setPosition(array);\r\n    };\r\n\r\n    const AnimateShortestpath = (shortestpath, timeout) => {\r\n        for (let i = 0; i < shortestpath.length; i++) {\r\n            setInterval(() => {\r\n                let newgrid = grid.slice();\r\n                newgrid[shortestpath[i]].isPath = true;\r\n                setGrid(newgrid);\r\n            }, 200 * (i) + 10 * timeout);\r\n        }\r\n    }\r\n    const AnimateDjisktra = (OrderOfVisitedNodes) => {\r\n        for (let i = 0; i < OrderOfVisitedNodes.length; i++) {\r\n            setInterval(() => {\r\n                let newgrid = grid.slice();\r\n                newgrid[OrderOfVisitedNodes[i]].isVisited = true;\r\n                setGrid(newgrid);\r\n            }, 5 * i);\r\n        }\r\n    }\r\n\r\n    const runDjisktra = () => {\r\n        const [OrderOfVisitedNodes, shortestpath] = Djisktra(rows, cols, position[0], position[1], grid);\r\n        setDescription(AlgoDescription.Djisktra);\r\n        AnimateDjisktra(OrderOfVisitedNodes);\r\n        AnimateShortestpath(shortestpath, OrderOfVisitedNodes.length + 1);\r\n    };\r\n\r\n    const runBFS = () =>{\r\n        let new_grid = removeWalls(grid,rows,cols,wall_weight);\r\n        setDescription(AlgoDescription.BFS);\r\n        setGrid(new_grid);\r\n        runDjisktra();\r\n        setDescription(AlgoDescription.BFS);\r\n    }\r\n\r\n    const handlewalls = (idx) => {\r\n        if (pressed) {\r\n            let newgrid = grid.slice();\r\n            newgrid[idx].Weight = weight;\r\n            setGrid(newgrid);\r\n        }\r\n    };\r\n    \r\n    document.title=\"Path Finding Visualizer\"\r\n    \r\n\r\n    return (\r\n        <section >\r\n            {/* <button onClick={()=>setGrid(GenerateGrid())}>reset</button> */}\r\n            <Container maxWidth=\"xl\" className=\"container\">\r\n                <Grid container  justify=\"flex-start\" >\r\n                    <Grid item md={3} className=\"item\">\r\n                        <p>Select and double click on Grid to Change start and end positions</p>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setStart(true)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                            Choose Start Point</Button>\r\n                        </Box>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setStart(false)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                            Choose End Point</Button>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={3} className=\"item\">\r\n                        <p>Click and drag to create Walls and weights</p>\r\n                        <Box m={1}>\r\n                            <Button\r\n                                onClick={() => setWeight(wall_weight)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                            Set Walls</Button>\r\n                        </Box>\r\n                        <Box m={1}>\r\n                            <input type=\"range\" max=\"50\" min=\"2\" id=\"weight\"></input>\r\n                            <br/>\r\n                            <Button\r\n                                onClick={() => setWeight(document.getElementById(\"weight\").value)}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                            Set Weights</Button>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={3} className=\"item\">\r\n                        <p>Choose one of the following Algorithms</p>\r\n                        <Grid container>\r\n                            <Grid item xs={6}   className=\"border-right\">\r\n                                <u><h4>Weighted</h4></u>\r\n                                <Button\r\n                                    onClick={() => runDjisktra()}\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                >\r\n                                Djisktra</Button>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <u><h4>Un-Weighted</h4></u>\r\n                                <Button\r\n                                    onClick={() => runBFS()}\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                >\r\n                                BFS</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n            <div style={{ width: (cols) * 42 }} className=\"grid\">\r\n                {grid.map(e => (\r\n                    <div\r\n                        onDoubleClick={() => handlechange(e.idx)}\r\n                        onMouseDown={() => setPressed(true)}\r\n                        onMouseUp={() => setPressed(false)}\r\n                        onMouseEnter={() => handlewalls(e.idx)}\r\n                    >\r\n                        <Node\r\n                            key={e}\r\n                            idx={e.idx}\r\n                            isVisited={e.isVisited}\r\n                            isPath={e.isPath}\r\n                            Weight={e.Weight}\r\n                            isStart={position[0] === e.idx}\r\n                            isEnd={position[1] === e.idx}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <b>Algorithm Description: </b><i>{Description}</i>\r\n            </div>\r\n        </section>\r\n    );\r\n});\r\nexport default App;","\r\nexport function Djisktra(rows,cols,startnode,endnode,grid){\r\n    const INF = 1e9 , size = grid.length , wall_weight = 1e6;\r\n    \r\n    function node(row,col){\r\n        return row*cols + col;\r\n    }\r\n    function isNeighbor(row,col){\r\n        return (row>=0 && row<rows) && (col>=0 && col<cols) && (grid[node(row,col)].Weight != wall_weight)\r\n    }\r\n    function calculateShotestPath(distance){\r\n        let shortestpath=[];    \r\n        let r = grid[endnode].row,c = grid[endnode].col, dist = INF;   \r\n        while(true){\r\n            let new_row=r,new_col=c;\r\n            for(let row=r-1;row<=r+1;row++){\r\n                for(let col=c-1;col<=c+1;col++){\r\n                    if(Math.abs(r-row)+Math.abs(c-col)==1 && isNeighbor(row,col)){\r\n                        if(distance[node(row,col)]<dist){\r\n                            dist = distance[node(row,col)];\r\n                            new_row =row;\r\n                            new_col =col;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(new_row==r && new_col==c){\r\n                shortestpath.reverse();\r\n                shortestpath.shift();\r\n                return shortestpath;\r\n            }\r\n            shortestpath.push(node(new_row,new_col));\r\n            [r,c] = [new_row,new_col];\r\n        }\r\n    }\r\n    \r\n    let OrderOfVisitedNodes = [];\r\n    let distance = new Array(size).fill(INF);\r\n    distance[startnode]=0;\r\n    let queue = [];\r\n    queue.push(startnode);\r\n\r\n    while(queue.length>0){\r\n        queue.sort(\r\n            function(a,b){\r\n                return distance[a] - distance[b];\r\n            }\r\n        );\r\n        let u = queue[0];\r\n        if(u!=startnode)OrderOfVisitedNodes.push(u);\r\n        let r = grid[u].row , c = grid[u].col;\r\n        let x = queue.shift();\r\n        for(let row=r-1;row<=r+1;row++){\r\n            for(let col=c-1;col<=c+1;col++){\r\n                if(Math.abs(r-row)+Math.abs(c-col)==1 && isNeighbor(row,col)){\r\n                    let v = node(row,col);\r\n                    if(distance[node(row,col)]>distance[u]+grid[v].Weight){\r\n                        if(v==endnode){\r\n                            return [OrderOfVisitedNodes,calculateShotestPath(distance)];\r\n                        }\r\n                        distance[v] = distance[u]+grid[v].Weight;\r\n                        queue.push(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return[OrderOfVisitedNodes,[]];\r\n}","export function removeWalls(grid,rows,cols,wall_weight){\r\n    let new_grid = grid.slice();\r\n    for(let i=0;i<rows*cols;i++){\r\n        if(new_grid[i].Weight!=wall_weight) new_grid[i].Weight = 1;\r\n    }\r\n    return new_grid;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pfv/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}